#
#    Copyright 2015 Fondazione Bruno Kessler - Trento RISE
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#


# db setting
spring.data.mongodb.database=gamification-test
spring.data.mongodb.uri=mongodb://localhost:27017/gamification-test

# trace player moves
trace.playerMove=false

#
# RABBITMQ CONFIGURATIONS
#

rabbitmq.enabled=${RABBITMQ_ENABLED:false}
rabbitmq.host=${RABBITMQ_HOST:localhost}
rabbitmq.virtualhost=${RABBITMQ_VIRTUALHOST:playgo}
rabbitmq.port=${RABBITMQ_PORT:5672}
rabbitmq.user=${RABBITMQ_USER:user}
rabbitmq.password=${RABBITMQ_PASSWORD:password}
rabbitmq.pngExchangeName=${RABBITMQ_PNGEXCHANGENAME:ge-notifications}
rabbitmq.pngRoutingKeyPrefix=${RABBITMQ_PNGROUTINGKEYPREFIX:game}

#
# SERIALIZATION
#
spring.jackson.serialization.write-dates-as-timestamps=true

#
# DATA 
#
import.dir=/home/dev/gamification/importdb
export.dir=/home/dev/gamification/exportdb

#
# ENGINE TASK SCHEDULES
#
schedule.task.job-destroyer=${SCHEDULE_TASK_JOB_DESTROYER:0 0 0 * * *}
schedule.task.check-performance-group-challenge=${SCHEDULE_TASK_CHECK_PERFORMANCE_GROUP_CHALLENGE:0 0 1 * * *}
schedule.task.challenge-failure=${SCHEDULE_TASK_CHALLENGE_FAILURE:0 0 4 * * *}
schedule.task.game-stats=${SCHEDULE_TASK_GAME_STATS:0 0 2 * * *}


#
# PERSISTENCE TASK CONFIGURATIONS
#


# Use to activate task persistence (default value false)
task.persistence.activate=${TASK_PERSISTENCE_ACTIVATE:false}

# Use the MongoDB store
org.quartz.jobStore.class=com.novemberain.quartz.mongodb.MongoDBJobStore
# comma separated list of mongodb hosts/replica set seeds (optional if 'org.quartz.jobStore.mongoUri' is set)
org.quartz.jobStore.addresses=${QUARTZ_STORAGE_HOST:localhost}
# database name
org.quartz.jobStore.dbName=${QUARTZ_STORAGE_DBNAME:gamification_task_store}
# Will be used to create collections like mycol_jobs, mycol_triggers, mycol_calendars, mycol_locks
org.quartz.jobStore.collectionPrefix=${QUARTZ_STORAGE_PREFIX:quartz}
# thread count setting is ignored by the MongoDB store but Quartz requires it
org.quartz.threadPool.threadCount=10

# Cluster quartz scheduler

# turn clustering on:
org.quartz.jobStore.isClustered=${QUARTZ_CLUSTER_ON:true}

# Must be unique for each node or AUTO to use autogenerated:
org.quartz.scheduler.instanceId=AUTO

# The same cluster name on each node:
org.quartz.scheduler.instanceName=${QUARTZ_CLUSTER_NAME:gamificationCluster}

# Frequency (in milliseconds) at which this instance checks-in to cluster.
# Affects the rate of detecting failed instances.
# Defaults to 7500 ms.
org.quartz.jobStore.clusterCheckinInterval=10000

# Time in millis after which a trigger can be considered as expired.
# Defaults to 10 minutes:
org.quartz.jobStore.triggerTimeoutMillis=1200000

# Time in millis after which a job can be considered as expired.
# Defaults to 10 minutes:
org.quartz.jobStore.jobTimeoutMillis=1200000

# Time limit in millis after which a trigger should be treated as misfired.
# Defaults to 5000 ms.
org.quartz.jobStore.misfireThreshold=10000

# WriteConcern timeout in millis when writing in Replica Set.
# Defaults to 5000 ms.
org.quartz.jobStore.mongoOptionWriteConcernTimeoutMillis=10000


# If cluster fails to check persisted jobs in cluster, do nothing
org.quartz.jobStore.checkInErrorHandler.class=com.novemberain.quartz.mongodb.cluster.NoOpErrorHandler
