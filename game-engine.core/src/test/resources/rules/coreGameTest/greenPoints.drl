package eu.trentorise.game.model


global Integer green_walk_bike_points;
global Integer green_bus_train_points;
global Integer green_pr_bonus;
global Integer green_sustainable_bonus;
global Double walk_min;
global Double carpooling_min_km;

declare PRItinerary end

import eu.trentorise.game.core.Utility;

global Utility utils;


rule "update green points"
when
    InputData( $bike : data["bikeDistance"], $walk : data["walkDistance"], $bus : data["busDistance"],$train : data["trainDistance"])
    $pc : PointConcept(name == "green leaves")
then
	utils.log("apply \'update green points\'");
	Double bike = $bike != null ? (Double) $bike : 0;
	Double walk = $walk != null ? (Double) $walk : 0;
    Double bus = $bus != null ? (Double) $bus : 0;
    Double train = $train != null ? (Double) $train : 0;

	Long dist1 = Math.round(bike + walk);
	//utils.log("dist1 " + dist1);
	Long dist2 = Math.round(bus + train);
    //utils.log("dist2 " + dist2);
    
    $pc.setScore($pc.getScore() + green_walk_bike_points * dist1 + green_bus_train_points * dist2);
    update($pc);
end

rule "green p+r bonus"
	salience 10
when
    InputData(data['p+r'] == true) 
    $pc : PointConcept(name == "green leaves")
then
	utils.log("apply \'green p+r bonus\'");
	$pc.setScore($pc.getScore() + green_pr_bonus);
    update($pc);
    insert(new PRItinerary());
end

rule "green sustainable bonus"
	salience 1
when
    InputData(data['sustainable'] == true)
    //InputData(data['p+r'] == false)
    not PRItinerary()
    $pc : PointConcept(name == "green leaves")
then
	utils.log("apply \'green sustainable bonus\'");
	$pc.setScore($pc.getScore() + green_sustainable_bonus);
    update($pc);
end

rule "update no-car counters"
lock-on-active
when
	Action ($id : id == "save_itinerary")
    InputData( $km : data["carDistance"] == null, $walk : data["walkDistance"], 
    	$transit : data["transitDistance"],
    	$bus : data["busDistance"], 
    	$bike : data["bikeDistance"], 
    	$train : data["trainDistance"],
    	$carpooling : data["carpoolingDistance"],
    	$boat : data["boatDistance"])
    $noCarTrips : PointConcept(name == "NoCar_Trips")
then
	boolean isValidNoCar = false;
	if ($walk == null || (Double)$walk >= walk_min)
		isValidNoCar = true;
		
	if (isValidNoCar == false) {
		if ($bus != null && (Double)$bus > 0) 
			isValidNoCar = true;
		else if ($bike != null && (Double)$bike > 0)
			isValidNoCar = true;
		else if ($train != null && (Double)$train > 0)
			isValidNoCar = true;
		else if ($transit != null && (Double)$transit > 0)
			isValidNoCar = true;
		else if ($boat != null)
			isValidNoCar = true;
	}
	
	if($carpooling != null && (Double)$carpooling >= carpooling_min_km) {
		isValidNoCar = false;
	}
	
	if (isValidNoCar == true) {
		utils.log("apply \'NoCar_Trips update\'");
		$noCarTrips.setScore($noCarTrips.getScore() + 1.0d);
		update($noCarTrips); 
	}
end