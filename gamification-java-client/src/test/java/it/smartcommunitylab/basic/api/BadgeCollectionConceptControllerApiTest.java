/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.basic.api;

import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import it.smartcommunitylab.ApiClient;
import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.auth.HttpBasicAuth;
import it.smartcommunitylab.model.BadgeCollectionConcept;

/**
 * API tests for BadgeCollectionConceptControllerApi
 */
@Ignore
public class BadgeCollectionConceptControllerApiTest {

    private final BadgeCollectionConceptControllerApi api = new BadgeCollectionConceptControllerApi();
    private ApiClient apiClient;
    private final String userName = "long-rovereto";
    private final String password = "rov";
    private String baseUrl = "http://localhost:6060/gamification";
    private String gameId = "57ac710fd4c6ac7872b0e7a1";
    private String playerId = "24153";
    private String conceptName = "green leaves";

    @Before
    public void init() {
    	 apiClient = new ApiClient(baseUrl);
    	
    	 // Configure OAuth2 access token for authorization: oauth2
    	 // OAuth oauth2 = (OAuth) apiClient.getAuthentication("oauth2");
    	 // oauth2.setAccessToken("YOUR_ACCESS_TOKEN");
    	 
    	 // Configure basic auth. 
    	 HttpBasicAuth basic = (HttpBasicAuth) apiClient.getAuthentication("basic");
    	 basic.setUsername(userName);
    	 basic.setPassword(password);

    	 api.setApiClient(apiClient);
    }
    
    /**
     * Add a badge collection
     *
     * Add a badge collection to the game definition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBadgeUsingPOSTTest() throws ApiException {
        String gameId = null;
        BadgeCollectionConcept badge = null;
        api.addBadgeUsingPOST(gameId, badge);

        // TODO: test validations
    }
    
    /**
     * Delete a badge collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBadgeCollectionUsingDELETETest() throws ApiException {
        String gameId = null;
        String collectionId = null;
        api.deleteBadgeCollectionUsingDELETE(gameId, collectionId);

        // TODO: test validations
    }
    
    /**
     * Get a badge collection
     *
     * Get the definition of a badge collection in a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBadgeCollectionUsingGETTest() throws ApiException {
        String gameId = null;
        String collectionId = null;
        BadgeCollectionConcept response = api.readBadgeCollectionUsingGET(gameId, collectionId);

        // TODO: test validations
    }
    
    /**
     * Get the badge collections
     *
     * Get badge collections in a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBadgeCollectionsUsingGETTest() throws ApiException {
        List<BadgeCollectionConcept> response = api.readBadgeCollectionsUsingGET(gameId);

        System.out.println(response.size());
    }
    
    /**
     * Update a badge collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBadgeCollectionUsingPUTTest() throws ApiException {
        String gameId = null;
        api.updateBadgeCollectionUsingPUT(gameId);

        // TODO: test validations
    }
    
}
