/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.oauth.api;

import java.io.IOException;
import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

import it.smartcommunitylab.ApiClient;
import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.auth.OAuth;
import it.smartcommunitylab.model.ext.PointConcept;

/**
 * API tests for DomainPointConceptControllerApi
 */
@Ignore
public class DomainPointConceptControllerApiTest {

    private final DomainPointConceptControllerApi api = new DomainPointConceptControllerApi();
    private ApiClient apiClient;
    private String baseUrl = "http://localhost:6060/gamification";
    private String gameId = "57ac710fd4c6ac7872b0e7a1";
    private String playerId = "101";
    private String conceptName = "green leaves";
    private String domain = "demo-domain";
    
    
    @Before
    public void init() {
    	 apiClient = new ApiClient(baseUrl);
    	
    	 // Configure OAuth2 access token for authorization: oauth2
    	 OAuth oauth2 = (OAuth) apiClient.getAuthentication("oauth2");
    	 oauth2.setAccessToken("043b57e8-56d9-432f-91e3-b4dfd39d1841");
    	 
    	 // Configure basic auth. 
    	 api.setApiClient(apiClient);
    }
    
    /**
     * Add point
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void addPointUsingPOST1Test() throws ApiException {
//        PointConcept point = new PointConcept();
//        Long time = System.currentTimeMillis();
//        PeriodInternal intr = new PeriodInternal();
//        PeriodInstanceImpl instance = new PeriodInstanceImpl();
//        instance.setEnd(time);
//        instance.setStart(time);
//        instance.setIndex(1);
//        instance.setScore(2.0);
//        Interval interval = new Interval(lowerBoundDate.toDateTime(),
//				lowerBoundDate.withPeriodAdded(jodaPeriod, 1).toDateTime())
//        intr.getInstances().put(time, instance);
//        point.getPeriods().put("weekly", intr);
//        
//        PointConcept response = api.addPointUsingPOST1(domain, gameId, point);
//
//        System.out.println(response.getId());
//    }
    
    /**
     * Delete point
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePointUsingDELETETest() throws ApiException {
        String domain = null;
        String gameId = null;
        String pointId = null;
        api.deletePointUsingDELETE(domain, gameId, pointId);

        // TODO: test validations
    }
    
    /**
     * Get point
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException 
     * @throws ClassNotFoundException 
     * @throws IllegalArgumentException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    @Test
    public void readPointUsingGETTest() throws ApiException, JsonParseException, JsonMappingException, IllegalArgumentException, ClassNotFoundException, IOException {
        String pointId = "1";
        PointConcept response = api.readPointUsingGET(domain, gameId, pointId);

        System.out.println(response);
    }
    
    /**
     * Get points
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException 
     * @throws ClassNotFoundException 
     * @throws IllegalArgumentException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    @Test
	public void readPointsUsingGET1Test() throws ApiException, JsonParseException, JsonMappingException, IllegalArgumentException, ClassNotFoundException, IOException {
		List<PointConcept> response = api.readPointsUsingGET1(domain, gameId);

		System.out.println(response.size());
	}
    
    /**
     * Edit point
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePointUsingPUTTest() throws ApiException {
        String domain = null;
        String gameId = null;
        PointConcept point = null;
        api.updatePointUsingPUT(domain, gameId, point);

        // TODO: test validations
    }
    
}
