/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.basic.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.Response;

import it.smartcommunitylab.ApiCallback;
import it.smartcommunitylab.ApiClient;
import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.ApiResponse;
import it.smartcommunitylab.Configuration;
import it.smartcommunitylab.Pair;
import it.smartcommunitylab.ProgressRequestBody;
import it.smartcommunitylab.ProgressResponseBody;
import it.smartcommunitylab.model.ChallengeConcept;
import it.smartcommunitylab.model.ChallengeInvitation;
import it.smartcommunitylab.model.Inventory;
import it.smartcommunitylab.model.ItemChoice;
import it.smartcommunitylab.model.PagePlayerStateDTO;
import it.smartcommunitylab.model.PlayerBlackList;
import it.smartcommunitylab.model.PlayerStateDTO;
import it.smartcommunitylab.model.WrapperQuery;
import it.smartcommunitylab.model.ext.PlayerControllerUtils;

public class PlayerControllerApi {
    private ApiClient apiClient;
    
    // FIXME PAY ATTENTION THIS FIELDS ARE MANUALLY INTRODUCED
    // TO PERMIT CORRECT INSTANTIATION OF STATE SUBCLASSES AS GAMECONCEPT
    private ObjectMapper mapper =
            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    private PlayerControllerUtils playerControllerUtils = new PlayerControllerUtils();
    

    public PlayerControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayerControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for acceptChallengeUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acceptChallengeUsingPOSTCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/challenges/{challengeName}/accept"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "challengeName" + "\\}", apiClient.escapeString(challengeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acceptChallengeUsingPOSTValidateBeforeCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling acceptChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling acceptChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'challengeName' is set
        if (challengeName == null) {
            throw new ApiException("Missing the required parameter 'challengeName' when calling acceptChallengeUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = acceptChallengeUsingPOSTCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Accept challenge
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @return ChallengeConcept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeConcept acceptChallengeUsingPOST(String gameId, String playerId, String challengeName) throws ApiException {
        ApiResponse<ChallengeConcept> resp = acceptChallengeUsingPOSTWithHttpInfo(gameId, playerId, challengeName);
        return resp.getData();
    }

    /**
     * Accept challenge
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @return ApiResponse&lt;ChallengeConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeConcept> acceptChallengeUsingPOSTWithHttpInfo(String gameId, String playerId, String challengeName) throws ApiException {
        com.squareup.okhttp.Call call = acceptChallengeUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, null, null);
        Type localVarReturnType = new TypeToken<ChallengeConcept>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Accept challenge (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call acceptChallengeUsingPOSTAsync(String gameId, String playerId, String challengeName, final ApiCallback<ChallengeConcept> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acceptChallengeUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeConcept>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for acceptInvitationUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acceptInvitationUsingPOSTCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/invitation/accept/{challengeName}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "challengeName" + "\\}", apiClient.escapeString(challengeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acceptInvitationUsingPOSTValidateBeforeCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling acceptInvitationUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling acceptInvitationUsingPOST(Async)");
        }
        
        // verify the required parameter 'challengeName' is set
        if (challengeName == null) {
            throw new ApiException("Missing the required parameter 'challengeName' when calling acceptInvitationUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = acceptInvitationUsingPOSTCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * acceptInvitation
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void acceptInvitationUsingPOST(String gameId, String playerId, String challengeName) throws ApiException {
        acceptInvitationUsingPOSTWithHttpInfo(gameId, playerId, challengeName);
    }

    /**
     * acceptInvitation
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> acceptInvitationUsingPOSTWithHttpInfo(String gameId, String playerId, String challengeName) throws ApiException {
        com.squareup.okhttp.Call call = acceptInvitationUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, null, null);
        return apiClient.execute(call);
    }

    /**
     * acceptInvitation (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call acceptInvitationUsingPOSTAsync(String gameId, String playerId, String challengeName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acceptInvitationUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for activateChoiceUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param choice choice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call activateChoiceUsingPOSTCall(String gameId, String playerId, ItemChoice choice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = choice;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/inventory/activate"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateChoiceUsingPOSTValidateBeforeCall(String gameId, String playerId, ItemChoice choice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling activateChoiceUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling activateChoiceUsingPOST(Async)");
        }
        
        // verify the required parameter 'choice' is set
        if (choice == null) {
            throw new ApiException("Missing the required parameter 'choice' when calling activateChoiceUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = activateChoiceUsingPOSTCall(gameId, playerId, choice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Activate a choice
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param choice choice (required)
     * @return Inventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Inventory activateChoiceUsingPOST(String gameId, String playerId, ItemChoice choice) throws ApiException {
        ApiResponse<Inventory> resp = activateChoiceUsingPOSTWithHttpInfo(gameId, playerId, choice);
        return resp.getData();
    }

    /**
     * Activate a choice
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param choice choice (required)
     * @return ApiResponse&lt;Inventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Inventory> activateChoiceUsingPOSTWithHttpInfo(String gameId, String playerId, ItemChoice choice) throws ApiException {
        com.squareup.okhttp.Call call = activateChoiceUsingPOSTValidateBeforeCall(gameId, playerId, choice, null, null);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Activate a choice (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param choice choice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateChoiceUsingPOSTAsync(String gameId, String playerId, ItemChoice choice, final ApiCallback<Inventory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateChoiceUsingPOSTValidateBeforeCall(gameId, playerId, choice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignChallengeUsingPOST
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignChallengeUsingPOSTCall(it.smartcommunitylab.model.ext.ChallengeAssignmentDTO challengeData, String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeData;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/challenges"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignChallengeUsingPOSTValidateBeforeCall(it.smartcommunitylab.model.ext.ChallengeAssignmentDTO challengeData, String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'challengeData' is set
        if (challengeData == null) {
            throw new ApiException("Missing the required parameter 'challengeData' when calling assignChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling assignChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling assignChallengeUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = assignChallengeUsingPOSTCall(challengeData, gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign challenge
     * 
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void assignChallengeUsingPOST(it.smartcommunitylab.model.ext.ChallengeAssignmentDTO challengeData, String gameId, String playerId) throws ApiException {
        assignChallengeUsingPOSTWithHttpInfo(challengeData, gameId, playerId);
    }

    /**
     * Assign challenge
     * 
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> assignChallengeUsingPOSTWithHttpInfo(it.smartcommunitylab.model.ext.ChallengeAssignmentDTO challengeData, String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = assignChallengeUsingPOSTValidateBeforeCall(challengeData, gameId, playerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Assign challenge (asynchronously)
     * 
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignChallengeUsingPOSTAsync(it.smartcommunitylab.model.ext.ChallengeAssignmentDTO challengeData, String gameId, String playerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignChallengeUsingPOSTValidateBeforeCall(challengeData, gameId, playerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for assignGroupChallengeUsingPOST
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignGroupChallengeUsingPOSTCall(it.smartcommunitylab.model.ext.GroupChallengeDTO challengeData, String gameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeData;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/group-challenges"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignGroupChallengeUsingPOSTValidateBeforeCall(it.smartcommunitylab.model.ext.GroupChallengeDTO challengeData, String gameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'challengeData' is set
        if (challengeData == null) {
            throw new ApiException("Missing the required parameter 'challengeData' when calling assignGroupChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling assignGroupChallengeUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = assignGroupChallengeUsingPOSTCall(challengeData, gameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * assignGroupChallenge
     * 
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void assignGroupChallengeUsingPOST(it.smartcommunitylab.model.ext.GroupChallengeDTO challengeData, String gameId) throws ApiException {
        assignGroupChallengeUsingPOSTWithHttpInfo(challengeData, gameId);
    }

    /**
     * assignGroupChallenge
     * 
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> assignGroupChallengeUsingPOSTWithHttpInfo(it.smartcommunitylab.model.ext.GroupChallengeDTO challengeData, String gameId) throws ApiException {
        com.squareup.okhttp.Call call = assignGroupChallengeUsingPOSTValidateBeforeCall(challengeData, gameId, null, null);
        return apiClient.execute(call);
    }

    /**
     * assignGroupChallenge (asynchronously)
     * 
     * @param challengeData challengeData (required)
     * @param gameId gameId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignGroupChallengeUsingPOSTAsync(it.smartcommunitylab.model.ext.GroupChallengeDTO challengeData, String gameId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignGroupChallengeUsingPOSTValidateBeforeCall(challengeData, gameId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for blockPlayerUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blockPlayerUsingPOSTCall(String gameId, String playerId, String otherPlayerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/block/{otherPlayerId}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "otherPlayerId" + "\\}", apiClient.escapeString(otherPlayerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blockPlayerUsingPOSTValidateBeforeCall(String gameId, String playerId, String otherPlayerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling blockPlayerUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling blockPlayerUsingPOST(Async)");
        }
        
        // verify the required parameter 'otherPlayerId' is set
        if (otherPlayerId == null) {
            throw new ApiException("Missing the required parameter 'otherPlayerId' when calling blockPlayerUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = blockPlayerUsingPOSTCall(gameId, playerId, otherPlayerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add another player to challenge block list
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @return PlayerBlackList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerBlackList blockPlayerUsingPOST(String gameId, String playerId, String otherPlayerId) throws ApiException {
        ApiResponse<PlayerBlackList> resp = blockPlayerUsingPOSTWithHttpInfo(gameId, playerId, otherPlayerId);
        return resp.getData();
    }

    /**
     * Add another player to challenge block list
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @return ApiResponse&lt;PlayerBlackList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerBlackList> blockPlayerUsingPOSTWithHttpInfo(String gameId, String playerId, String otherPlayerId) throws ApiException {
        com.squareup.okhttp.Call call = blockPlayerUsingPOSTValidateBeforeCall(gameId, playerId, otherPlayerId, null, null);
        Type localVarReturnType = new TypeToken<PlayerBlackList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add another player to challenge block list (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blockPlayerUsingPOSTAsync(String gameId, String playerId, String otherPlayerId, final ApiCallback<PlayerBlackList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blockPlayerUsingPOSTValidateBeforeCall(gameId, playerId, otherPlayerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerBlackList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelInvitationUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelInvitationUsingPOSTCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/invitation/cancel/{challengeName}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "challengeName" + "\\}", apiClient.escapeString(challengeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelInvitationUsingPOSTValidateBeforeCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling cancelInvitationUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling cancelInvitationUsingPOST(Async)");
        }
        
        // verify the required parameter 'challengeName' is set
        if (challengeName == null) {
            throw new ApiException("Missing the required parameter 'challengeName' when calling cancelInvitationUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelInvitationUsingPOSTCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * cancelInvitation
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelInvitationUsingPOST(String gameId, String playerId, String challengeName) throws ApiException {
        cancelInvitationUsingPOSTWithHttpInfo(gameId, playerId, challengeName);
    }

    /**
     * cancelInvitation
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelInvitationUsingPOSTWithHttpInfo(String gameId, String playerId, String challengeName) throws ApiException {
        com.squareup.okhttp.Call call = cancelInvitationUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, null, null);
        return apiClient.execute(call);
    }

    /**
     * cancelInvitation (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelInvitationUsingPOSTAsync(String gameId, String playerId, String challengeName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelInvitationUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createPlayerUsingPOST1
     * @param gameId gameId (required)
     * @param player player (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPlayerUsingPOST1Call(String gameId, PlayerStateDTO player, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPlayerUsingPOST1ValidateBeforeCall(String gameId, PlayerStateDTO player, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling createPlayerUsingPOST1(Async)");
        }
        
        // verify the required parameter 'player' is set
        if (player == null) {
            throw new ApiException("Missing the required parameter 'player' when calling createPlayerUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = createPlayerUsingPOST1Call(gameId, player, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create player
     * 
     * @param gameId gameId (required)
     * @param player player (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createPlayerUsingPOST1(String gameId, PlayerStateDTO player) throws ApiException {
        createPlayerUsingPOST1WithHttpInfo(gameId, player);
    }

    /**
     * Create player
     * 
     * @param gameId gameId (required)
     * @param player player (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createPlayerUsingPOST1WithHttpInfo(String gameId, PlayerStateDTO player) throws ApiException {
        com.squareup.okhttp.Call call = createPlayerUsingPOST1ValidateBeforeCall(gameId, player, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create player (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param player player (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPlayerUsingPOST1Async(String gameId, PlayerStateDTO player, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPlayerUsingPOST1ValidateBeforeCall(gameId, player, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePlayerUsingDELETE1
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePlayerUsingDELETE1Call(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePlayerUsingDELETE1ValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling deletePlayerUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling deletePlayerUsingDELETE1(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePlayerUsingDELETE1Call(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePlayerUsingDELETE1(String gameId, String playerId) throws ApiException {
        deletePlayerUsingDELETE1WithHttpInfo(gameId, playerId);
    }

    /**
     * Delete player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePlayerUsingDELETE1WithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = deletePlayerUsingDELETE1ValidateBeforeCall(gameId, playerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete player state (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePlayerUsingDELETE1Async(String gameId, String playerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePlayerUsingDELETE1ValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPlayerChallengeUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlayerChallengeUsingGETCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/challenges"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlayerChallengeUsingGETValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getPlayerChallengeUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling getPlayerChallengeUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getPlayerChallengeUsingGETCall(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player challenges
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return List&lt;ChallengeConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChallengeConcept> getPlayerChallengeUsingGET(String gameId, String playerId) throws ApiException {
        ApiResponse<List<ChallengeConcept>> resp = getPlayerChallengeUsingGETWithHttpInfo(gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player challenges
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;List&lt;ChallengeConcept&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChallengeConcept>> getPlayerChallengeUsingGETWithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = getPlayerChallengeUsingGETValidateBeforeCall(gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<List<ChallengeConcept>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player challenges (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlayerChallengeUsingGETAsync(String gameId, String playerId, final ApiCallback<List<ChallengeConcept>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlayerChallengeUsingGETValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ChallengeConcept>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for inviteIntoAChallengeUsingPOST
     * @param invitation invitation (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call inviteIntoAChallengeUsingPOSTCall(ChallengeInvitation invitation, String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invitation;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/invitation"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call inviteIntoAChallengeUsingPOSTValidateBeforeCall(ChallengeInvitation invitation, String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invitation' is set
        if (invitation == null) {
            throw new ApiException("Missing the required parameter 'invitation' when calling inviteIntoAChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling inviteIntoAChallengeUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling inviteIntoAChallengeUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = inviteIntoAChallengeUsingPOSTCall(invitation, gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * inviteIntoAChallenge
     * 
     * @param invitation invitation (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ChallengeInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeInvitation inviteIntoAChallengeUsingPOST(ChallengeInvitation invitation, String gameId, String playerId) throws ApiException {
        ApiResponse<ChallengeInvitation> resp = inviteIntoAChallengeUsingPOSTWithHttpInfo(invitation, gameId, playerId);
        return resp.getData();
    }

    /**
     * inviteIntoAChallenge
     * 
     * @param invitation invitation (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;ChallengeInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeInvitation> inviteIntoAChallengeUsingPOSTWithHttpInfo(ChallengeInvitation invitation, String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = inviteIntoAChallengeUsingPOSTValidateBeforeCall(invitation, gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<ChallengeInvitation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * inviteIntoAChallenge (asynchronously)
     * 
     * @param invitation invitation (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call inviteIntoAChallengeUsingPOSTAsync(ChallengeInvitation invitation, String gameId, String playerId, final ApiCallback<ChallengeInvitation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = inviteIntoAChallengeUsingPOSTValidateBeforeCall(invitation, gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeInvitation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readCustomDataUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readCustomDataUsingGETCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/custom"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readCustomDataUsingGETValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readCustomDataUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readCustomDataUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readCustomDataUsingGETCall(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player custom data
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> readCustomDataUsingGET(String gameId, String playerId) throws ApiException {
        ApiResponse<Map<String, Object>> resp = readCustomDataUsingGETWithHttpInfo(gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player custom data
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> readCustomDataUsingGETWithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = readCustomDataUsingGETValidateBeforeCall(gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player custom data (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readCustomDataUsingGETAsync(String gameId, String playerId, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readCustomDataUsingGETValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readInventoryUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readInventoryUsingGETCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/inventory"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readInventoryUsingGETValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readInventoryUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readInventoryUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readInventoryUsingGETCall(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player inventory
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return Inventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Inventory readInventoryUsingGET(String gameId, String playerId) throws ApiException {
        ApiResponse<Inventory> resp = readInventoryUsingGETWithHttpInfo(gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player inventory
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;Inventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Inventory> readInventoryUsingGETWithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = readInventoryUsingGETValidateBeforeCall(gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player inventory (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readInventoryUsingGETAsync(String gameId, String playerId, final ApiCallback<Inventory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readInventoryUsingGETValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLevelsUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLevelsUsingGETCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/levels"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLevelsUsingGETValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readLevelsUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readLevelsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readLevelsUsingGETCall(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player levels
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return List&lt;it.smartcommunitylab.model.ext.PlayerLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<it.smartcommunitylab.model.ext.PlayerLevel> readLevelsUsingGET(String gameId, String playerId) throws ApiException {
        ApiResponse<List<it.smartcommunitylab.model.ext.PlayerLevel>> resp = readLevelsUsingGETWithHttpInfo(gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player levels
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;List&lt;it.smartcommunitylab.model.ext.PlayerLevel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<it.smartcommunitylab.model.ext.PlayerLevel>> readLevelsUsingGETWithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = readLevelsUsingGETValidateBeforeCall(gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<List<it.smartcommunitylab.model.ext.PlayerLevel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player levels (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLevelsUsingGETAsync(String gameId, String playerId, final ApiCallback<List<it.smartcommunitylab.model.ext.PlayerLevel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLevelsUsingGETValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<it.smartcommunitylab.model.ext.PlayerLevel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPlayerBlackListUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPlayerBlackListUsingGETCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/blacklist"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPlayerBlackListUsingGETValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readPlayerBlackListUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readPlayerBlackListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readPlayerBlackListUsingGETCall(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player black list of other players
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return PlayerBlackList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerBlackList readPlayerBlackListUsingGET(String gameId, String playerId) throws ApiException {
        ApiResponse<PlayerBlackList> resp = readPlayerBlackListUsingGETWithHttpInfo(gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player black list of other players
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;PlayerBlackList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerBlackList> readPlayerBlackListUsingGETWithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = readPlayerBlackListUsingGETValidateBeforeCall(gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<PlayerBlackList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player black list of other players (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPlayerBlackListUsingGETAsync(String gameId, String playerId, final ApiCallback<PlayerBlackList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPlayerBlackListUsingGETValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerBlackList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPlayerUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param readChallenges readChallenges (optional)
     * @param points  (optional)
     * @param badges  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPlayerUsingGETCall(String gameId, String playerId, Boolean readChallenges, List<String> points, List<String> badges, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (readChallenges != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("readChallenges", readChallenges));
        if (points != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "points", points));
        if (badges != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "badges", badges));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPlayerUsingGETValidateBeforeCall(String gameId, String playerId, Boolean readChallenges, List<String> points, List<String> badges, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readPlayerUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readPlayerUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readPlayerUsingGETCall(gameId, playerId, readChallenges, points, badges, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param readChallenges readChallenges (optional)
     * @param points  (optional)
     * @param badges  (optional)
     * @return PlayerStateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    public PlayerStateDTO readPlayerUsingGET(String gameId, String playerId, Boolean readChallenges, List<String> points, List<String> badges) throws ApiException, JsonParseException, JsonMappingException, IOException {
        Response response = readPlayerUsingGETWithHttpInfo(gameId, playerId, readChallenges, points, badges);
        return playerControllerUtils
                .convertPlayerState(mapper.readValue(response.body().byteStream(), Map.class));
    }

    /**
     * Get player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param readChallenges readChallenges (optional)
     * @param points  (optional)
     * @param badges  (optional)
     * @return ApiResponse&lt;PlayerStateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response readPlayerUsingGETWithHttpInfo(String gameId, String playerId, Boolean readChallenges, List<String> points, List<String> badges) throws ApiException {
        com.squareup.okhttp.Call call = readPlayerUsingGETValidateBeforeCall(gameId, playerId, readChallenges, points, badges, null, null);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        return apiClient.executeSimple(call, localVarReturnType);
    }

    /**
     * Get player state (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param readChallenges readChallenges (optional)
     * @param points  (optional)
     * @param badges  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPlayerUsingGETAsync(String gameId, String playerId, Boolean readChallenges, List<String> points, List<String> badges, final ApiCallback<PlayerStateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPlayerUsingGETValidateBeforeCall(gameId, playerId, readChallenges, points, badges, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readStateUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param points  (optional)
     * @param badges  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readStateUsingGETCall(String gameId, String playerId, List<String> points, List<String> badges, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/state"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (points != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "points", points));
        if (badges != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "badges", badges));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readStateUsingGETValidateBeforeCall(String gameId, String playerId, List<String> points, List<String> badges, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readStateUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readStateUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readStateUsingGETCall(gameId, playerId, points, badges, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param points  (optional)
     * @param badges  (optional)
     * @return PlayerStateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    public PlayerStateDTO readStateUsingGET(String gameId, String playerId, List<String> points, List<String> badges) throws ApiException, JsonParseException, JsonMappingException, IOException {
    	 Response response = readStateUsingGETWithHttpInfo(gameId, playerId, points, badges);
         return playerControllerUtils
                 .convertPlayerState(mapper.readValue(response.body().byteStream(), Map.class));
    }

    
    
    /**
     * Get player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param points  (optional)
     * @param badges  (optional)
     * @return ApiResponse&lt;PlayerStateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response readStateUsingGETWithHttpInfo(String gameId, String playerId, List<String> points, List<String> badges) throws ApiException {
        com.squareup.okhttp.Call call = readStateUsingGETValidateBeforeCall(gameId, playerId, points, badges, null, null);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        return apiClient.executeSimple(call, localVarReturnType);
    }

    /**
     * Get player state (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param points  (optional)
     * @param badges  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readStateUsingGETAsync(String gameId, String playerId, List<String> points, List<String> badges, final ApiCallback<PlayerStateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readStateUsingGETValidateBeforeCall(gameId, playerId, points, badges, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readSystemPlayerStateUsingGET
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param conceptName conceptName (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readSystemPlayerStateUsingGETCall(String gameId, String playerId, String conceptName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/challengers"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conceptName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("conceptName", conceptName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readSystemPlayerStateUsingGETValidateBeforeCall(String gameId, String playerId, String conceptName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readSystemPlayerStateUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readSystemPlayerStateUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readSystemPlayerStateUsingGETCall(gameId, playerId, conceptName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get availabe challengers for the player
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param conceptName conceptName (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> readSystemPlayerStateUsingGET(String gameId, String playerId, String conceptName) throws ApiException {
        ApiResponse<List<String>> resp = readSystemPlayerStateUsingGETWithHttpInfo(gameId, playerId, conceptName);
        return resp.getData();
    }

    /**
     * Get availabe challengers for the player
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param conceptName conceptName (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> readSystemPlayerStateUsingGETWithHttpInfo(String gameId, String playerId, String conceptName) throws ApiException {
        com.squareup.okhttp.Call call = readSystemPlayerStateUsingGETValidateBeforeCall(gameId, playerId, conceptName, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get availabe challengers for the player (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param conceptName conceptName (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readSystemPlayerStateUsingGETAsync(String gameId, String playerId, String conceptName, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readSystemPlayerStateUsingGETValidateBeforeCall(gameId, playerId, conceptName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readTeamsByMemberUsingGET1
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readTeamsByMemberUsingGET1Call(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/teams"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readTeamsByMemberUsingGET1ValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readTeamsByMemberUsingGET1(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readTeamsByMemberUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = readTeamsByMemberUsingGET1Call(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player teams
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return List&lt;it.smartcommunitylab.model.ext.TeamDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<it.smartcommunitylab.model.ext.TeamDTO> readTeamsByMemberUsingGET1(String gameId, String playerId) throws ApiException {
        ApiResponse<List<it.smartcommunitylab.model.ext.TeamDTO>> resp = readTeamsByMemberUsingGET1WithHttpInfo(gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player teams
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;List&lt;it.smartcommunitylab.model.ext.TeamDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<it.smartcommunitylab.model.ext.TeamDTO>> readTeamsByMemberUsingGET1WithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = readTeamsByMemberUsingGET1ValidateBeforeCall(gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<List<it.smartcommunitylab.model.ext.TeamDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player teams (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readTeamsByMemberUsingGET1Async(String gameId, String playerId, final ApiCallback<List<it.smartcommunitylab.model.ext.TeamDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readTeamsByMemberUsingGET1ValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<it.smartcommunitylab.model.ext.TeamDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refuseInvitationUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refuseInvitationUsingPOSTCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/invitation/refuse/{challengeName}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "challengeName" + "\\}", apiClient.escapeString(challengeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refuseInvitationUsingPOSTValidateBeforeCall(String gameId, String playerId, String challengeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling refuseInvitationUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling refuseInvitationUsingPOST(Async)");
        }
        
        // verify the required parameter 'challengeName' is set
        if (challengeName == null) {
            throw new ApiException("Missing the required parameter 'challengeName' when calling refuseInvitationUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = refuseInvitationUsingPOSTCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * refuseInvitation
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void refuseInvitationUsingPOST(String gameId, String playerId, String challengeName) throws ApiException {
        refuseInvitationUsingPOSTWithHttpInfo(gameId, playerId, challengeName);
    }

    /**
     * refuseInvitation
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> refuseInvitationUsingPOSTWithHttpInfo(String gameId, String playerId, String challengeName) throws ApiException {
        com.squareup.okhttp.Call call = refuseInvitationUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, null, null);
        return apiClient.execute(call);
    }

    /**
     * refuseInvitation (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param challengeName challengeName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refuseInvitationUsingPOSTAsync(String gameId, String playerId, String challengeName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refuseInvitationUsingPOSTValidateBeforeCall(gameId, playerId, challengeName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchByQueryUsingPOST
     * @param gameId gameId (required)
     * @param query query (required)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchByQueryUsingPOSTCall(String gameId, WrapperQuery query, String page, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/search"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchByQueryUsingPOSTValidateBeforeCall(String gameId, WrapperQuery query, String page, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling searchByQueryUsingPOST(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchByQueryUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = searchByQueryUsingPOSTCall(gameId, query, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search player states
     * 
     * @param gameId gameId (required)
     * @param query query (required)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @return PagePlayerStateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePlayerStateDTO searchByQueryUsingPOST(String gameId, WrapperQuery query, String page, String size) throws ApiException {
        ApiResponse<PagePlayerStateDTO> resp = searchByQueryUsingPOSTWithHttpInfo(gameId, query, page, size);
        return resp.getData();
    }

    /**
     * Search player states
     * 
     * @param gameId gameId (required)
     * @param query query (required)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @return ApiResponse&lt;PagePlayerStateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePlayerStateDTO> searchByQueryUsingPOSTWithHttpInfo(String gameId, WrapperQuery query, String page, String size) throws ApiException {
        com.squareup.okhttp.Call call = searchByQueryUsingPOSTValidateBeforeCall(gameId, query, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePlayerStateDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search player states (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param query query (required)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchByQueryUsingPOSTAsync(String gameId, WrapperQuery query, String page, String size, final ApiCallback<PagePlayerStateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchByQueryUsingPOSTValidateBeforeCall(gameId, query, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePlayerStateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unBlockPlayerUsingPOST
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unBlockPlayerUsingPOSTCall(String gameId, String playerId, String otherPlayerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/unblock/{otherPlayerId}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "otherPlayerId" + "\\}", apiClient.escapeString(otherPlayerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unBlockPlayerUsingPOSTValidateBeforeCall(String gameId, String playerId, String otherPlayerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling unBlockPlayerUsingPOST(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling unBlockPlayerUsingPOST(Async)");
        }
        
        // verify the required parameter 'otherPlayerId' is set
        if (otherPlayerId == null) {
            throw new ApiException("Missing the required parameter 'otherPlayerId' when calling unBlockPlayerUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = unBlockPlayerUsingPOSTCall(gameId, playerId, otherPlayerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unblock another player from challenge block list
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @return PlayerBlackList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerBlackList unBlockPlayerUsingPOST(String gameId, String playerId, String otherPlayerId) throws ApiException {
        ApiResponse<PlayerBlackList> resp = unBlockPlayerUsingPOSTWithHttpInfo(gameId, playerId, otherPlayerId);
        return resp.getData();
    }

    /**
     * Unblock another player from challenge block list
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @return ApiResponse&lt;PlayerBlackList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerBlackList> unBlockPlayerUsingPOSTWithHttpInfo(String gameId, String playerId, String otherPlayerId) throws ApiException {
        com.squareup.okhttp.Call call = unBlockPlayerUsingPOSTValidateBeforeCall(gameId, playerId, otherPlayerId, null, null);
        Type localVarReturnType = new TypeToken<PlayerBlackList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unblock another player from challenge block list (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param otherPlayerId otherPlayerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unBlockPlayerUsingPOSTAsync(String gameId, String playerId, String otherPlayerId, final ApiCallback<PlayerBlackList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unBlockPlayerUsingPOSTValidateBeforeCall(gameId, playerId, otherPlayerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerBlackList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomDataUsingPUT1
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param customData customData (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomDataUsingPUT1Call(String gameId, String playerId, Object customData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customData;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}/custom"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomDataUsingPUT1ValidateBeforeCall(String gameId, String playerId, Object customData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling updateCustomDataUsingPUT1(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling updateCustomDataUsingPUT1(Async)");
        }
        
        // verify the required parameter 'customData' is set
        if (customData == null) {
            throw new ApiException("Missing the required parameter 'customData' when calling updateCustomDataUsingPUT1(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomDataUsingPUT1Call(gameId, playerId, customData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateCustomData
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param customData customData (required)
     * @return PlayerStateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerStateDTO updateCustomDataUsingPUT1(String gameId, String playerId, Object customData) throws ApiException {
        ApiResponse<PlayerStateDTO> resp = updateCustomDataUsingPUT1WithHttpInfo(gameId, playerId, customData);
        return resp.getData();
    }

    /**
     * updateCustomData
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param customData customData (required)
     * @return ApiResponse&lt;PlayerStateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerStateDTO> updateCustomDataUsingPUT1WithHttpInfo(String gameId, String playerId, Object customData) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomDataUsingPUT1ValidateBeforeCall(gameId, playerId, customData, null, null);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateCustomData (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param customData customData (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomDataUsingPUT1Async(String gameId, String playerId, Object customData, final ApiCallback<PlayerStateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomDataUsingPUT1ValidateBeforeCall(gameId, playerId, customData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePlayerUsingPUT
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePlayerUsingPUTCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/game/{gameId}/player/{playerId}"
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePlayerUsingPUTValidateBeforeCall(String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling updatePlayerUsingPUT(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling updatePlayerUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePlayerUsingPUTCall(gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePlayerUsingPUT(String gameId, String playerId) throws ApiException {
        updatePlayerUsingPUTWithHttpInfo(gameId, playerId);
    }

    /**
     * Edit player state
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePlayerUsingPUTWithHttpInfo(String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = updatePlayerUsingPUTValidateBeforeCall(gameId, playerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit player state (asynchronously)
     * 
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePlayerUsingPUTAsync(String gameId, String playerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePlayerUsingPUTValidateBeforeCall(gameId, playerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
