/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.model;

import java.io.IOException;
import java.util.Objects;

import org.threeten.bp.OffsetDateTime;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModelProperty;

/**
 * Attendee
 */

public class Attendee {
  @SerializedName("challengeScore")
  private Double challengeScore = null;

  @SerializedName("playerId")
  private String playerId = null;

  /**
   * Gets or Sets role
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    PROPOSER("PROPOSER"),
    
    GUEST("GUEST");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String text) {
      for (RoleEnum b : RoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RoleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("role")
  private RoleEnum role = null;

  @SerializedName("valuationTime")
  private OffsetDateTime valuationTime = null;

  @SerializedName("winner")
  private Boolean winner = null;

  public Attendee challengeScore(Double challengeScore) {
    this.challengeScore = challengeScore;
    return this;
  }

   /**
   * Get challengeScore
   * @return challengeScore
  **/
  @ApiModelProperty(value = "")
  public Double getChallengeScore() {
    return challengeScore;
  }

  public void setChallengeScore(Double challengeScore) {
    this.challengeScore = challengeScore;
  }

  public Attendee playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @ApiModelProperty(value = "")
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }

  public Attendee role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @ApiModelProperty(value = "")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public Attendee valuationTime(OffsetDateTime valuationTime) {
    this.valuationTime = valuationTime;
    return this;
  }

   /**
   * Get valuationTime
   * @return valuationTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getValuationTime() {
    return valuationTime;
  }

  public void setValuationTime(OffsetDateTime valuationTime) {
    this.valuationTime = valuationTime;
  }

  public Attendee winner(Boolean winner) {
    this.winner = winner;
    return this;
  }

   /**
   * Get winner
   * @return winner
  **/
  @ApiModelProperty(value = "")
  public Boolean isWinner() {
    return winner;
  }

  public void setWinner(Boolean winner) {
    this.winner = winner;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attendee attendee = (Attendee) o;
    return Objects.equals(this.challengeScore, attendee.challengeScore) &&
        Objects.equals(this.playerId, attendee.playerId) &&
        Objects.equals(this.role, attendee.role) &&
        Objects.equals(this.valuationTime, attendee.valuationTime) &&
        Objects.equals(this.winner, attendee.winner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeScore, playerId, role, valuationTime, winner);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attendee {\n");
    
    sb.append("    challengeScore: ").append(toIndentedString(challengeScore)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    valuationTime: ").append(toIndentedString(valuationTime)).append("\n");
    sb.append("    winner: ").append(toIndentedString(winner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

