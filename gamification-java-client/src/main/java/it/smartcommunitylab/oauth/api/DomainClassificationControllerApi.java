/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.oauth.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import it.smartcommunitylab.ApiCallback;
import it.smartcommunitylab.ApiClient;
import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.ApiResponse;
import it.smartcommunitylab.Configuration;
import it.smartcommunitylab.Pair;
import it.smartcommunitylab.ProgressRequestBody;
import it.smartcommunitylab.ProgressResponseBody;
import it.smartcommunitylab.model.ClassificationBoard;
import it.smartcommunitylab.model.GeneralClassificationDTO;
import it.smartcommunitylab.model.IncrementalClassificationDTO;

public class DomainClassificationControllerApi {
    private ApiClient apiClient;

    public DomainClassificationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainClassificationControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addClassificationTaskUsingPOST
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param task task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addClassificationTaskUsingPOSTCall(String domain, String gameId, GeneralClassificationDTO task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/classification"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addClassificationTaskUsingPOSTValidateBeforeCall(String domain, String gameId, GeneralClassificationDTO task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addClassificationTaskUsingPOST(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling addClassificationTaskUsingPOST(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling addClassificationTaskUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addClassificationTaskUsingPOSTCall(domain, gameId, task, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param task task (required)
     * @return GeneralClassificationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeneralClassificationDTO addClassificationTaskUsingPOST(String domain, String gameId, GeneralClassificationDTO task) throws ApiException {
        ApiResponse<GeneralClassificationDTO> resp = addClassificationTaskUsingPOSTWithHttpInfo(domain, gameId, task);
        return resp.getData();
    }

    /**
     * Add general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param task task (required)
     * @return ApiResponse&lt;GeneralClassificationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeneralClassificationDTO> addClassificationTaskUsingPOSTWithHttpInfo(String domain, String gameId, GeneralClassificationDTO task) throws ApiException {
        com.squareup.okhttp.Call call = addClassificationTaskUsingPOSTValidateBeforeCall(domain, gameId, task, null, null);
        Type localVarReturnType = new TypeToken<GeneralClassificationDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add general classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param task task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addClassificationTaskUsingPOSTAsync(String domain, String gameId, GeneralClassificationDTO task, final ApiCallback<GeneralClassificationDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addClassificationTaskUsingPOSTValidateBeforeCall(domain, gameId, task, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeneralClassificationDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createIncrementalUsingPOST
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classification classification (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIncrementalUsingPOSTCall(String domain, String gameId, IncrementalClassificationDTO classification, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = classification;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/incclassification"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIncrementalUsingPOSTValidateBeforeCall(String domain, String gameId, IncrementalClassificationDTO classification, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createIncrementalUsingPOST(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling createIncrementalUsingPOST(Async)");
        }
        
        // verify the required parameter 'classification' is set
        if (classification == null) {
            throw new ApiException("Missing the required parameter 'classification' when calling createIncrementalUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createIncrementalUsingPOSTCall(domain, gameId, classification, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add incremental classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classification classification (required)
     * @return IncrementalClassificationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IncrementalClassificationDTO createIncrementalUsingPOST(String domain, String gameId, IncrementalClassificationDTO classification) throws ApiException {
        ApiResponse<IncrementalClassificationDTO> resp = createIncrementalUsingPOSTWithHttpInfo(domain, gameId, classification);
        return resp.getData();
    }

    /**
     * Add incremental classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classification classification (required)
     * @return ApiResponse&lt;IncrementalClassificationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IncrementalClassificationDTO> createIncrementalUsingPOSTWithHttpInfo(String domain, String gameId, IncrementalClassificationDTO classification) throws ApiException {
        com.squareup.okhttp.Call call = createIncrementalUsingPOSTValidateBeforeCall(domain, gameId, classification, null, null);
        Type localVarReturnType = new TypeToken<IncrementalClassificationDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add incremental classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classification classification (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIncrementalUsingPOSTAsync(String domain, String gameId, IncrementalClassificationDTO classification, final ApiCallback<IncrementalClassificationDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIncrementalUsingPOSTValidateBeforeCall(domain, gameId, classification, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IncrementalClassificationDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteClassificationTaskUsingDELETE
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClassificationTaskUsingDELETECall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/task/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClassificationTaskUsingDELETEValidateBeforeCall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteClassificationTaskUsingDELETE(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling deleteClassificationTaskUsingDELETE(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling deleteClassificationTaskUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClassificationTaskUsingDELETECall(domain, gameId, classificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteClassificationTaskUsingDELETE(String domain, String gameId, String classificationId) throws ApiException {
        deleteClassificationTaskUsingDELETEWithHttpInfo(domain, gameId, classificationId);
    }

    /**
     * Delete general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClassificationTaskUsingDELETEWithHttpInfo(String domain, String gameId, String classificationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClassificationTaskUsingDELETEValidateBeforeCall(domain, gameId, classificationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete general classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClassificationTaskUsingDELETEAsync(String domain, String gameId, String classificationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClassificationTaskUsingDELETEValidateBeforeCall(domain, gameId, classificationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteIncrementalUsingDELETE
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIncrementalUsingDELETECall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/incclassification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIncrementalUsingDELETEValidateBeforeCall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteIncrementalUsingDELETE(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling deleteIncrementalUsingDELETE(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling deleteIncrementalUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIncrementalUsingDELETECall(domain, gameId, classificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete incremental classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIncrementalUsingDELETE(String domain, String gameId, String classificationId) throws ApiException {
        deleteIncrementalUsingDELETEWithHttpInfo(domain, gameId, classificationId);
    }

    /**
     * Delete incremental classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIncrementalUsingDELETEWithHttpInfo(String domain, String gameId, String classificationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteIncrementalUsingDELETEValidateBeforeCall(domain, gameId, classificationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete incremental classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIncrementalUsingDELETEAsync(String domain, String gameId, String classificationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIncrementalUsingDELETEValidateBeforeCall(domain, gameId, classificationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editClassificationTaskUsingPUT
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param task task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editClassificationTaskUsingPUTCall(String domain, String gameId, String classificationId, GeneralClassificationDTO task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/classification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editClassificationTaskUsingPUTValidateBeforeCall(String domain, String gameId, String classificationId, GeneralClassificationDTO task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling editClassificationTaskUsingPUT(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling editClassificationTaskUsingPUT(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling editClassificationTaskUsingPUT(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling editClassificationTaskUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = editClassificationTaskUsingPUTCall(domain, gameId, classificationId, task, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param task task (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editClassificationTaskUsingPUT(String domain, String gameId, String classificationId, GeneralClassificationDTO task) throws ApiException {
        editClassificationTaskUsingPUTWithHttpInfo(domain, gameId, classificationId, task);
    }

    /**
     * Edit general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param task task (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editClassificationTaskUsingPUTWithHttpInfo(String domain, String gameId, String classificationId, GeneralClassificationDTO task) throws ApiException {
        com.squareup.okhttp.Call call = editClassificationTaskUsingPUTValidateBeforeCall(domain, gameId, classificationId, task, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit general classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param task task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editClassificationTaskUsingPUTAsync(String domain, String gameId, String classificationId, GeneralClassificationDTO task, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editClassificationTaskUsingPUTValidateBeforeCall(domain, gameId, classificationId, task, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGeneralClassificationUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGeneralClassificationUsingGETCall(String domain, String gameId, String classificationId, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/data/game/{gameId}/classification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGeneralClassificationUsingGETValidateBeforeCall(String domain, String gameId, String classificationId, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getGeneralClassificationUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getGeneralClassificationUsingGET(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling getGeneralClassificationUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getGeneralClassificationUsingGETCall(domain, gameId, classificationId, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read general classification board
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @return ClassificationBoard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationBoard getGeneralClassificationUsingGET(String domain, String gameId, String classificationId, Integer page, Integer size) throws ApiException {
        ApiResponse<ClassificationBoard> resp = getGeneralClassificationUsingGETWithHttpInfo(domain, gameId, classificationId, page, size);
        return resp.getData();
    }

    /**
     * Read general classification board
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @return ApiResponse&lt;ClassificationBoard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationBoard> getGeneralClassificationUsingGETWithHttpInfo(String domain, String gameId, String classificationId, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getGeneralClassificationUsingGETValidateBeforeCall(domain, gameId, classificationId, page, size, null, null);
        Type localVarReturnType = new TypeToken<ClassificationBoard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read general classification board (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGeneralClassificationUsingGETAsync(String domain, String gameId, String classificationId, Integer page, Integer size, final ApiCallback<ClassificationBoard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGeneralClassificationUsingGETValidateBeforeCall(domain, gameId, classificationId, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationBoard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIncrementalClassificationUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param timestamp timestamp (optional, default to -1)
     * @param periodInstanceIndex periodInstanceIndex (optional, default to -1)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIncrementalClassificationUsingGETCall(String domain, String gameId, String classificationId, Long timestamp, Integer periodInstanceIndex, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/data/game/{gameId}/incclassification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (periodInstanceIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("periodInstanceIndex", periodInstanceIndex));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIncrementalClassificationUsingGETValidateBeforeCall(String domain, String gameId, String classificationId, Long timestamp, Integer periodInstanceIndex, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getIncrementalClassificationUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getIncrementalClassificationUsingGET(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling getIncrementalClassificationUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getIncrementalClassificationUsingGETCall(domain, gameId, classificationId, timestamp, periodInstanceIndex, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read incremental classification board
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param timestamp timestamp (optional, default to -1)
     * @param periodInstanceIndex periodInstanceIndex (optional, default to -1)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @return ClassificationBoard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationBoard getIncrementalClassificationUsingGET(String domain, String gameId, String classificationId, Long timestamp, Integer periodInstanceIndex, Integer page, Integer size) throws ApiException {
        ApiResponse<ClassificationBoard> resp = getIncrementalClassificationUsingGETWithHttpInfo(domain, gameId, classificationId, timestamp, periodInstanceIndex, page, size);
        return resp.getData();
    }

    /**
     * Read incremental classification board
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param timestamp timestamp (optional, default to -1)
     * @param periodInstanceIndex periodInstanceIndex (optional, default to -1)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @return ApiResponse&lt;ClassificationBoard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationBoard> getIncrementalClassificationUsingGETWithHttpInfo(String domain, String gameId, String classificationId, Long timestamp, Integer periodInstanceIndex, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getIncrementalClassificationUsingGETValidateBeforeCall(domain, gameId, classificationId, timestamp, periodInstanceIndex, page, size, null, null);
        Type localVarReturnType = new TypeToken<ClassificationBoard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read incremental classification board (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param timestamp timestamp (optional, default to -1)
     * @param periodInstanceIndex periodInstanceIndex (optional, default to -1)
     * @param page page (optional, default to -1)
     * @param size size (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIncrementalClassificationUsingGETAsync(String domain, String gameId, String classificationId, Long timestamp, Integer periodInstanceIndex, Integer page, Integer size, final ApiCallback<ClassificationBoard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIncrementalClassificationUsingGETValidateBeforeCall(domain, gameId, classificationId, timestamp, periodInstanceIndex, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationBoard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readAllGeneralClassificationsUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readAllGeneralClassificationsUsingGETCall(String domain, String gameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/classification"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readAllGeneralClassificationsUsingGETValidateBeforeCall(String domain, String gameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readAllGeneralClassificationsUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readAllGeneralClassificationsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readAllGeneralClassificationsUsingGETCall(domain, gameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get general classification definitions
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @return List&lt;GeneralClassificationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GeneralClassificationDTO> readAllGeneralClassificationsUsingGET(String domain, String gameId) throws ApiException {
        ApiResponse<List<GeneralClassificationDTO>> resp = readAllGeneralClassificationsUsingGETWithHttpInfo(domain, gameId);
        return resp.getData();
    }

    /**
     * Get general classification definitions
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @return ApiResponse&lt;List&lt;GeneralClassificationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GeneralClassificationDTO>> readAllGeneralClassificationsUsingGETWithHttpInfo(String domain, String gameId) throws ApiException {
        com.squareup.okhttp.Call call = readAllGeneralClassificationsUsingGETValidateBeforeCall(domain, gameId, null, null);
        Type localVarReturnType = new TypeToken<List<GeneralClassificationDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get general classification definitions (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readAllGeneralClassificationsUsingGETAsync(String domain, String gameId, final ApiCallback<List<GeneralClassificationDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readAllGeneralClassificationsUsingGETValidateBeforeCall(domain, gameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GeneralClassificationDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readAllIncrementalUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readAllIncrementalUsingGETCall(String domain, String gameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/incclassification"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readAllIncrementalUsingGETValidateBeforeCall(String domain, String gameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readAllIncrementalUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readAllIncrementalUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readAllIncrementalUsingGETCall(domain, gameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get incremental classification defintions
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @return List&lt;IncrementalClassificationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IncrementalClassificationDTO> readAllIncrementalUsingGET(String domain, String gameId) throws ApiException {
        ApiResponse<List<IncrementalClassificationDTO>> resp = readAllIncrementalUsingGETWithHttpInfo(domain, gameId);
        return resp.getData();
    }

    /**
     * Get incremental classification defintions
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @return ApiResponse&lt;List&lt;IncrementalClassificationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IncrementalClassificationDTO>> readAllIncrementalUsingGETWithHttpInfo(String domain, String gameId) throws ApiException {
        com.squareup.okhttp.Call call = readAllIncrementalUsingGETValidateBeforeCall(domain, gameId, null, null);
        Type localVarReturnType = new TypeToken<List<IncrementalClassificationDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get incremental classification defintions (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readAllIncrementalUsingGETAsync(String domain, String gameId, final ApiCallback<List<IncrementalClassificationDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readAllIncrementalUsingGETValidateBeforeCall(domain, gameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IncrementalClassificationDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readGeneralClassificationUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readGeneralClassificationUsingGETCall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/classification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readGeneralClassificationUsingGETValidateBeforeCall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readGeneralClassificationUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readGeneralClassificationUsingGET(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling readGeneralClassificationUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readGeneralClassificationUsingGETCall(domain, gameId, classificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @return GeneralClassificationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeneralClassificationDTO readGeneralClassificationUsingGET(String domain, String gameId, String classificationId) throws ApiException {
        ApiResponse<GeneralClassificationDTO> resp = readGeneralClassificationUsingGETWithHttpInfo(domain, gameId, classificationId);
        return resp.getData();
    }

    /**
     * Get general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @return ApiResponse&lt;GeneralClassificationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeneralClassificationDTO> readGeneralClassificationUsingGETWithHttpInfo(String domain, String gameId, String classificationId) throws ApiException {
        com.squareup.okhttp.Call call = readGeneralClassificationUsingGETValidateBeforeCall(domain, gameId, classificationId, null, null);
        Type localVarReturnType = new TypeToken<GeneralClassificationDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get general classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readGeneralClassificationUsingGETAsync(String domain, String gameId, String classificationId, final ApiCallback<GeneralClassificationDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readGeneralClassificationUsingGETValidateBeforeCall(domain, gameId, classificationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeneralClassificationDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readIncrementalUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readIncrementalUsingGETCall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/incclassification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readIncrementalUsingGETValidateBeforeCall(String domain, String gameId, String classificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readIncrementalUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readIncrementalUsingGET(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling readIncrementalUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readIncrementalUsingGETCall(domain, gameId, classificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get incremental classification defition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @return IncrementalClassificationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IncrementalClassificationDTO readIncrementalUsingGET(String domain, String gameId, String classificationId) throws ApiException {
        ApiResponse<IncrementalClassificationDTO> resp = readIncrementalUsingGETWithHttpInfo(domain, gameId, classificationId);
        return resp.getData();
    }

    /**
     * Get incremental classification defition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @return ApiResponse&lt;IncrementalClassificationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IncrementalClassificationDTO> readIncrementalUsingGETWithHttpInfo(String domain, String gameId, String classificationId) throws ApiException {
        com.squareup.okhttp.Call call = readIncrementalUsingGETValidateBeforeCall(domain, gameId, classificationId, null, null);
        Type localVarReturnType = new TypeToken<IncrementalClassificationDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get incremental classification defition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readIncrementalUsingGETAsync(String domain, String gameId, String classificationId, final ApiCallback<IncrementalClassificationDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readIncrementalUsingGETValidateBeforeCall(domain, gameId, classificationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IncrementalClassificationDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIncrementalClassificationUsingPUT
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param classification classification (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIncrementalClassificationUsingPUTCall(String domain, String gameId, String classificationId, IncrementalClassificationDTO classification, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = classification;

        // create path and map variables
        String localVarPath = "/api/{domain}/model/game/{gameId}/incclassification/{classificationId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "classificationId" + "\\}", apiClient.escapeString(classificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIncrementalClassificationUsingPUTValidateBeforeCall(String domain, String gameId, String classificationId, IncrementalClassificationDTO classification, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateIncrementalClassificationUsingPUT(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling updateIncrementalClassificationUsingPUT(Async)");
        }
        
        // verify the required parameter 'classificationId' is set
        if (classificationId == null) {
            throw new ApiException("Missing the required parameter 'classificationId' when calling updateIncrementalClassificationUsingPUT(Async)");
        }
        
        // verify the required parameter 'classification' is set
        if (classification == null) {
            throw new ApiException("Missing the required parameter 'classification' when calling updateIncrementalClassificationUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateIncrementalClassificationUsingPUTCall(domain, gameId, classificationId, classification, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param classification classification (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateIncrementalClassificationUsingPUT(String domain, String gameId, String classificationId, IncrementalClassificationDTO classification) throws ApiException {
        updateIncrementalClassificationUsingPUTWithHttpInfo(domain, gameId, classificationId, classification);
    }

    /**
     * Edit general classification definition
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param classification classification (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateIncrementalClassificationUsingPUTWithHttpInfo(String domain, String gameId, String classificationId, IncrementalClassificationDTO classification) throws ApiException {
        com.squareup.okhttp.Call call = updateIncrementalClassificationUsingPUTValidateBeforeCall(domain, gameId, classificationId, classification, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit general classification definition (asynchronously)
     * 
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param classificationId classificationId (required)
     * @param classification classification (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIncrementalClassificationUsingPUTAsync(String domain, String gameId, String classificationId, IncrementalClassificationDTO classification, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIncrementalClassificationUsingPUTValidateBeforeCall(domain, gameId, classificationId, classification, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
